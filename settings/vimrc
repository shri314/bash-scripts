"----------------------------------------
" The .vimrc file
"
" Author : Shriram V
" Email  : shri314@yahoo.com
"----------------------------------------

set nocompatible

"----------------------------------------
" Load all plugins
"----------------------------------------
source ~/.vim/custom/plugins.vim

"----------------------------------------
" General Custimizations
"----------------------------------------
set visualbell
set ignorecase
set nofileignorecase
set nowildignorecase
set incsearch
set hlsearch
set ruler
set showmode
set showcmd
set showmatch
set matchpairs+=<:>
set iskeyword-=:
set cmdheight=1
"set textwidth=100
set softtabstop=-1
set tabstop=8
set shiftwidth=4
set shiftround
set magic
set switchbuf=useopen,split
set bs=eol,indent,start
set expandtab
set smartindent
set autoindent
set nowrap
set nowrapscan
set formatoptions-=t
set noequalalways
set warn
set nowriteany
set list
set listchars=tab:>-,trail:-
set virtualedit=block
set laststatus=2
set statusline=%<%f\ %h%m%r%=%-14.(%l,%c%V%)\ %P
set viminfo='1000,f1,<500,:500,@50,/100,h
"set scrolloff=5
set diffopt-=iwhite

set path=,,
set path+=.
set path+=..
set path+=../../
set path+=./include
set path+=../include
set path+=./src
set path+=../src
set path+=/usr/local/include
set path+=/usr/include/g++-3
set path+=/usr/include
set path+=$ENV_SEARCH_PATH

if $TEMP != ""
   set backupdir=$TEMP//
   set directory=$TEMP//
endif

if exists("&fdm")
   set fdm=marker
   set fmr={,}
   set nofen
endif

if exists("&mouse")
   set mousemodel=popup
endif

if !has('nvim')
   set cryptmethod=blowfish
endif

if has("win32")
   if executable('bash.exe')
      set shell=bash.exe
   else
      set shell=cmd.exe
   endif
else
   set shell=bash
endif

if has('mac') && $VIM == '/usr/share/vim'
   set diffopt-=internal
endif

if has("gui_running")
   "set guifont=Monospace\ Regular\ 11
   "set guifont=Monospace\ Italic\ 11
   autocmd GUIEnter * set guifont=Monaco:h14 | colorscheme desert
   if has("win32")
      autocmd BufNewFile,GUIEnter * simalt~x
   endif
endif

"----------------------------------------
" Plugin Customizations
"----------------------------------------

let g:git_conflict_inspector_use_leader = 0  " Use '?' prefix instead of <Leader>
let g:gitgutter_max_signs = -1               " No limit to number of diffs in the gutter
let g:gitgutter_show_msg_on_hunk_jumping = 1

"let g:loadTabulous = 1
let g:tabulousLabelLeftStr  = '_/     '
let g:tabulousLabelRightStr = '     \_'

let g:netrw_browse_split=3
let g:explVertical=1

"----------------------------------------
" Syntax & highlighting extensions
"----------------------------------------

highlight TabLineFill   ctermfg=Yellow     ctermbg=Grey
highlight TabLine       ctermfg=Blue       ctermbg=Black
highlight TabLineSel    ctermfg=Red        ctermbg=Blue   term=bold

highlight Comment        ctermfg=lightblue guifg=#8000ff gui=bold term=bold
highlight StatusLine     ctermfg=lightblue ctermbg=white
highlight StatusLineNC   ctermfg=gray      ctermbg=black

"----------------------------------------
" Settings overrides for filetype
"----------------------------------------
autocmd FileType cpp  setl cindent
autocmd FileType cpp  setl syntax=cpp11
autocmd FileType cpp  highlight Member term=bold ctermfg=white gui=bold
autocmd FileType cpp  syntax match Member /\<m_[_A-Za-z0-9]*\>/
autocmd FileType qf   highlight! QuickFixLine guifg=#3333b0 guibg=#a0c0a0
autocmd FileType perl setl iskeyword-=:
autocmd FileType make setl iskeyword-=:
autocmd FileType make setl noexpandtab
autocmd FileType yaml setl tabstop=2 softtabstop=2 shiftwidth=2 expandtab indentkeys-=0# indentkeys-=<:>
autocmd FileType git  setl nolist
autocmd FileType diff setl nolist
autocmd FileType man  setl nolist

"------------------------------------------
" Custom Functionality
"------------------------------------------
source ~/.vim/custom/qfix.vim
source ~/.vim/custom/tmux.vim
source ~/.vim/custom/diff-in-tab.vim
source ~/.vim/custom/both-open.vim
source ~/.vim/custom/git-show.vim

if filereadable(expand('~/.vimrc.custom'))
   source ~/.vimrc.custom
endif

"----------------------------------------
" Custom Mappings
"----------------------------------------
function! s:ToggleSwitchBuffer()
   if index(split(&switchbuf, ','), "split") == -1
      set switchbuf+=split
   else
      set switchbuf-=split
   endif
   echo 'switchbuf ='&switchbuf
endfunction

command! -nargs=0 ToggleSwitchBuffer call s:ToggleSwitchBuffer()

" Quick Display help for F12-<?> key strokes suppored
function! s:F12Help()
   echo "F12 - show F12 help\n"
   echo "h   - toggle wordhighlight\n"
   echo "i   - toggle paste\n"
   echo "l   - toggle list\n"
   echo "n   - toggle number\n"
   echo "q   - toggle quickfix\n"
   echo "g   - toggle GitGutterSignsToggle\n"
   echo "u   - toggle GitGutterLineHighlights\n"
   echo "s   - toggle switchbuf\n"
   echo "d   - display git-show for hash under cursor\n"
endfunction

function! s:EnhanceMapping(mode_cmd, mapping, enhancement)
   let current = maparg(a:mapping, 'n', 0, 1)
   if !empty(current)
      execute a:mode_cmd . ' <buffer> ' . a:mapping . ' ' . current.rhs . a:enhancement
   endif
endfunction

augroup EnhanceMappings
   autocmd!
   autocmd VimEnter * call s:EnhanceMapping('nmap', ']c', 'zz')
   autocmd VimEnter * call s:EnhanceMapping('nmap', '[c', 'zz')
augroup END

augroup RestoreCursorPos
   autocmd!
   autocmd BufReadPost * if line("'\"") > 0 && line("'\"") <= line("$") | execute "normal g'\"" | endif
augroup END

" use qa to close all windows individually with q
cnoreabbrev <expr> qa getcmdtype() == ":" && getcmdline() == 'qa' ? 'windo q' : 'qa'

" use xa to save and close all windows individually with x
cnoreabbrev <expr> xa getcmdtype() == ":" && getcmdline() == 'xa' ? 'windo x' : 'xa'

" always keep the next word to be found at the center of the screen
nmap n nzz
nmap N Nzz

"https://stackoverflow.com/questions/23695727/vim-highlight-a-word-with-without-moving-cursor
nnoremap * *``
nnoremap # #``

" Window size
map - <C-W>-
map = <C-W>+
map _ <C-W><
map + <C-W>>

map <F5>  :diffupdate<CR>:syntax sync fromstart<CR>:GitGutter<CR>:nohl<CR>
map <F8>   :cn<CR>m'z.`'
map <F7>   :cp<CR>m'z.`'

"F12<key> to apply special properties
map <F12><F12> :call <SID>F12Help()<CR>
map <F12>n :setl number!<CR>:echo 'number ='&number<CR>
map <F12>i :setl paste!<CR>:echo 'paste ='&paste<CR>
map <F12>l :setl list!<CR>:echo 'list ='&list<CR>
map <F12>s :ToggleSwitchBuffer<CR>
map <F12>q :QfixToggle<CR>:<BS><C-L>
map <F12>g :GitGutterSignsToggle<CR>
map <F12>u :GitGutterLineHighlightsToggle<CR>
map <F12>d :OpenGitShow <cword><CR>
map <F12>D :OpenGitShow origin/main:<cfile>

"----------------------------------------
" Last things
"----------------------------------------
if $ENV_BACKGROUND != ""
   set background=$ENV_BACKGROUND
endif

syntax on

" vim: set shiftwidth=3:
