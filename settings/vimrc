" .vimrc file
"
" Author   : Shriram V
" Email    : shri314@yahoo.com
"
" use Vim defaults be used for options that have a different Vi and Vim default value.
set nocompatible

"fzf setup
set runtimepath+=~/.fzf
set runtimepath+=/usr/local/opt/fzf

"To get or keep plugins updated, please run ':VundleUpdate' on the vim command prompt regularly

function! PluginEIf(uri)
   let l:status_all = eval("$VundlePlugin__all")
   let l:status_plu = eval("$VundlePlugin__" .. substitute(a:uri, "[-/.]", "_", "g"))
   if l:status_all != "0" || l:status_plu != "0"
      "echo "Y Plugin a:uri" .. l:status_plu
      Plugin a:uri
   else
      "echo "N Plugin a:uri" .. l:status_plu
   endif
endfunction

command! -nargs=1 EPlugin call PluginEIf(<args>)

"vundle setup
set runtimepath+=~/.vim/bundle/Vundle.vim "required for vundle
filetype off                              "required for vundle
call vundle#begin()                       "required for vundle
Plugin 'VundleVim/Vundle.vim'

EPlugin 'zirrostig/vim-schlepp'
EPlugin 'airblade/vim-gitgutter'
EPlugin 'webdevel/tabulous'
EPlugin 'yegappan/taglist'
call vundle#end()                         "required for vundle
filetype plugin indent on                 "required for vundle

if $ENV_BACKGROUND == "dark"
   set background=dark
elseif $ENV_BACKGROUND == "light"
   set background=light
else
   "set background=dark
   "set background=light
endif

set visualbell

" Turn on syntax highlighting
syntax on

" Enable loading the plugin files for specific file types
filetype plugin on
filetype plugin indent on

autocmd BufNewFile,BufRead *.cgi    setl filetype=perl
autocmd BufNewFile,BufRead *.tt     setl filetype=html
autocmd BufNewFile,BufRead *.strace setl filetype=strace
autocmd BufNewFile,BufRead *.vim    setl filetype=vim
autocmd BufNewFile,BufRead *.c,*.h,*.C,*.cc,*.cpp,*.hpp,*.cxx,*.hxx,*.hh,*.ipp  setl filetype=cpp
autocmd BufNewFile,BufRead makefile*,Makefile*,*.mk  setl filetype=make
autocmd BufNewFile,BufRead *.am     setl filetype=automake

"Syntax & highlighting extensions
highlight Comment        term=bold ctermfg=lightblue guifg=#8000ff gui=bold
highlight StatusLine     ctermfg=lightblue ctermbg=white
highlight StatusLineNC   ctermfg=gray      ctermbg=black

"Tabs:
"disables tabulour disables the plugin entirely.
"let g:loadTabulous = 1
let tabulousLabelLeftStr  = '_/     '
let tabulousLabelRightStr = '     \_'

highlight TabLineFill   ctermfg=Yellow     ctermbg=Grey
highlight TabLine       ctermfg=Blue       ctermbg=Black
highlight TabLineSel    ctermfg=Red        ctermbg=Blue   term=bold

autocmd FileType cpp setl syntax=cpp11
autocmd FileType cpp highlight Member term=bold ctermfg=white gui=bold
autocmd FileType cpp syntax match Member /\<m_[_A-Za-z0-9]*\>/
"autocmd FileType python compiler pylint
autocmd FileType qf highlight! QuickFixLine guifg=#3333b0 guibg=#a0c0a0


" FOLD CONFIG
if exists("&fdm")
   set fdm=marker
   set fmr={,}
   set nofen
endif

" Ignore case in text search patterns
set ignorecase

" Don't ignore case in file search patterns
set nofileignorecase

" Don't ignore case in file search completion
set nowildignorecase

" Incremental Search
set incsearch

" Highlight search
set hlsearch

" Show ruler
set ruler

" Set the shell to use
if has("win32")
   if executable('bash.exe')
      set shell=bash.exe
   else
      set shell=cmd.exe
   endif
else
   set shell=bash
endif

" Show brace matching as you edit
set showmatch

set matchpairs+=<:>
"set matchpairs+==:;

" Don't consider : as part of words
set iskeyword-=:
autocmd FileType make setl iskeyword-=:
autocmd FileType perl setl iskeyword-=:

" Show working mode
set showmode

" Show the command
set showcmd

" Number of screen lines to use for the command-line
set cmdheight=1

" Number of screen lines to use for the command-line
"set winminwidth=0

" Number of screen lines to use for the command-line
"set winminheight=0

" Shift width when you press << or >> to indent a line.
set shiftwidth=4
"autocmd FileType java setl shiftwidth=4
"autocmd FileType python setl shiftwidth=4
autocmd FileType vim setl shiftwidth=3

" Text width to use. this is enabled with `:set formatoptions+=t`
"set textwidth=100

" Number of spaces for a tab only for editing purpose
set softtabstop=-1

" Set Shift rounding off
set shiftround

" Patten matching
set magic

" Switch buffer to edit a new file, and use open file if it already open
set switchbuf=useopen,split
"set switchbuf=useopen

" Make program to use
if $ENV_MAKE_PRG != ""
   set makeprg=$ENV_MAKE_PRG
else
   set makeprg=make\ -s\ -w\ $*
endif

" Grep program to use
set grepprg=git\ grep\ -HIn\ $*

" working directory settings
"set autochdir

" Changes how backspace works.
set bs=eol,indent,start
"set bs=start

" Expand Tab
set expandtab
"set noexpandtab
autocmd FileType make setl noexpandtab

" Number of spaces for a tab
set tabstop=8
autocmd FileType java setl tabstop=8

"Error formats
"autocmd FileType cpp  setl errorformat=#%m
"autocmd FileType cpp  setl errorformat+=%f:%l:%c:\ %m,%f:%l:\ %m
"autocmd FileType cpp  setl errorformat+=make:\ ***\ %m,In\ file\ included\ from\ %f:%l:
"autocmd FileType cpp  setl errorformat+=%f:\ In[%*\\d]'%m':
"autocmd FileType cpp  setl errorformat+=\^I\^Ifrom\ %f:%l%m
"autocmd FileType cpp  setl errorformat+=%Dmake[%*\\d]:\ Entering\ directory\ `%f'
"autocmd FileType cpp  setl errorformat+=%Xmake[%*\\d]:\ Leaving\ directory\ `%f'

autocmd FileType java setl errorformat=##%m(%f:%l)
autocmd FileType java setl errorformat+=#%m
autocmd FileType java setl errorformat+=make:\ ***\ %m
autocmd FileType java setl errorformat+=%A%f:%l:\ %msymbol\ ,
autocmd FileType java setl errorformat+=%A%f:%l:\ %m
autocmd FileType java setl errorformat+=%-Z%p^
autocmd FileType java setl errorformat+=%Clocation%m
autocmd FileType java setl errorformat+=%Csymbol\ %#%m
autocmd FileType java setl errorformat+=%-G%.%#

autocmd FileType yaml setlocal tabstop=2 softtabstop=2 shiftwidth=2 expandtab indentkeys-=0# indentkeys-=<:>

" lines longer than the width of the window will not wrap
set nowrap

" Searches does not wrap around the end of the file
set nowrapscan

" prevent automatic wrap folding while typing beyond 'margin'. I hate it
set formatoptions-=t

"Not always equal
set noequalalways

if $TEMP != ""
   " Directory for backup files
   set backupdir=$TEMP

   " Directory for swap files
   set directory=$TEMP
endif

" warn when a shell command is used while the buffer has changed
set warn

" Does not allows writing to any file with no need for "!" override
set nowriteany

" viminfo settings
set viminfo='1000,f1,<500,:500,@50,/100,h

" Set indent
set smartindent
set autoindent
autocmd FileType cpp  set cindent

" Set cryptmethod
if !has('nvim')
   set cryptmethod=blowfish
endif

if has("win32")
   autocmd BufNewFile,GUIEnter * simalt~x
endif

set list
set listchars=tab:>-,trail:-
autocmd FileType git setl nolist
autocmd FileType diff setl nolist

" auto complete
"autocmd FileType java setlocal omnifunc=javacomplete#Complete

" man page support
source $HOME/.vim/manual.vim

" mouse settings
if exists("&mouse")
   "set mouse=a
   set mousemodel=popup
endif

" (Internal)
" Function to toggle the window size.
let g:ScrTog=0
function! ToggleScreenSize()
   if g:ScrTog == 1
      wincmd =
      let g:ScrTog=0
   else
      vertical resize
      resize
      let g:ScrTog=1
   endif
endfunction

function! QfixOpen()
   cclose
   top copen 5
   setl wrap
   normal gg
   call search('error:', 'cW')
endfunction

command! -nargs=+ -complete=shellcmd QfixRun call QfixRun(<q-args>)

function! QfixRun(cmd)
   cexpr system(a:cmd)
   call QfixOpen()
endfunction

" (Internal)
" Function to toggle the window size.
let g:ErrTog=0
function! ToggleQfix()
   if g:ErrTog == 0
      call QfixOpen()
      let g:ErrTog=1
   else
      call QfixOpen()
      cclose
      let g:ErrTog=0
   endif
endfunction

let g:gitgutter_max_signs=3000  "allow a max of 3000 diffs in the gutter

" (Internal)
" Function to toggle the gutter
function! ToggleGutter()
   if index(split(&signcolumn, ','), "no") == -1
      set signcolumn=no
   else
      set signcolumn=auto
   endif
   echo 'signcolumn ='&signcolumn
endfunction

" Search path for opening files.
if $ENV_SEARCH_PATH != ""
   set path=$ENV_SEARCH_PATH
else
   set path=,,.,..,../../,./include,../include,./src,../src,/usr/local/include,/usr/include/g++-3,/usr/include
endif

let g:netrw_browse_split=3 "split file open in netrw in a new tab

let g:explVertical=1 "split vertically the explorer Window

"set guifont=Monospace\ Regular\ 11
"set guifont=Monospace\ Italic\ 11
autocmd GUIEnter * set guifont=Monaco:h14 | colorscheme desert

"F2 to Save file
nmap <F2> :w<CR>
imap <F2> <Esc>:w<CR><Esc>a

"F4 to list files in the project with the word under the cursor
map <F4>  :silent grep! -e <cword> *<CR>:call QfixOpen()<CR>:<BS><C-L>

"Shift-F4 to list files in the project with the word under the cursor ignoring the case
map <F4>i :silent grep! -e <cword> -i *<CR>:call QfixOpen()<CR>:<BS><C-L>

"F5 to Stop highlighting words
map <F5>  :diffupdate<CR>:syntax sync fromstart<CR>:TlistUpdate<CR>:nohl<CR>

"F6 to switch window
map <F6> <C-W>w<C-G>

"Shift-F6 to toggle window size
map <S-F6> :call ToggleScreenSize()<CR><C-G>

"- to decrease the current window height
map - <C-W>-

"= to increase the current window height
map = <C-W>+

"_ to decrease the current window width
map _ <C-W><

"+ to increase the current window width
map + <C-W>>

"F8 to Go to next error
map <F8>   :cn<CR>m'z.`'

"F7 to Go to previous error
map <F7>   :cp<CR>m'z.`'

"F11 to comment current line and go to next line
map <F11> 0i#<Esc>j
autocmd FileType vim  map <buffer> <F11> 0i"<Esc>j
autocmd FileType cpp  map <buffer> <F11> 0i//<Esc>j
autocmd FileType java map <buffer> <F11> 0i//<Esc>j

function! HLWord()
   if !exists("s:highlightword")
      execute "syn match HL \"\\\<" .. expand("<cword>") .. "\\\>\""
      "highlight HL term=bold,reverse cterm=bold,reverse ctermfg=4 ctermbg=7
      highlight HL term=bold,reverse cterm=bold ctermfg=0 ctermbg=10 gui=bold guifg=bg guibg=LightGreen
      let s:highlightword = 1
      echo 's:highlightword=1'
   else
      syntax clear HL
      unlet s:highlightword
      echo 's:highlightword=0'
   endif
endfunction

" Highlight all instances of word under cursor, when idle.
" Useful when studying strange source code.
function! AutoHighlightToggle()
  let @/ = ''
  if exists('#auto_highlight')
    au! auto_highlight
    augroup! auto_highlight
    setl updatetime=4000
    echo 'Auto highlight current word: off'
    return 0
  else
    augroup auto_highlight
      au!
      au CursorHold * let @/ = '\V\<'.escape(expand('<cword>'), '\').'\>'
    augroup end
    setl updatetime=500
    echo 'Auto highlight current word: ON'
    return 1
  endif
endfunction

function! StubBeautify()
   echohl ErrorMsg | echo "Beautifier not configured..." | echohl None
endfunction

function! BeautifyUsingBcpp()
   if executable('bcpp')
      normal msHmt
      undojoin | %!bcpp -bnl -s -tbnl -i 3 -na -ylcnc -cc 33 2>/dev/null
      normal 'tzt`sa
   else
      call StubBeautify()
   endif
endfunction

function! BeautifyUsingAstyle()
   if executable('astyle')
      normal msHmt
      undojoin | %!astyle --style=allman --indent=spaces=3 --attach-extern-c --indent-switches --indent-namespaces --indent-classes --indent-preproc-define --indent-col1-comments --max-instatement-indent=40 --pad-oper --keep-one-line-blocks --convert-tabs --max-code-length=180 --lineend=linux --unpad-paren --align-pointer=type --align-reference=type 2>/dev/null | sed -e :a -e '/^\n*$/{$d;N;};/\n$/ba'
      normal 'tzt`sa
   else
      call StubBeautify()
   endif
endfunction

function! BeautifyUsingClangFormat()
   if executable('clang-format')
      normal msHmt
      undojoin | %!clang-format -style="{
         \AlignConsecutiveAssignments: 'true',
         \AlignOperands: 'true',
         \AlignAfterOpenBracket: Align,
         \BasedOnStyle: WebKit,
         \AlignTrailingComments: 'true',
         \AllowAllArgumentsOnNextLine: 'false',
         \AllowShortLambdasOnASingleLine: None,
         \AlwaysBreakTemplateDeclarations: 'Yes',
         \ConstructorInitializerAllOnOneLineOrOnePerLine: 'true',
         \ConstructorInitializerIndentWidth: '2',
         \KeepEmptyLinesAtTheStartOfBlocks: 'true',
         \MaxEmptyLinesToKeep: '3',
         \UseTab: Never
         \}"
      normal 'tzt`sa
   else
      call StubBeautify()
   endif
endfunction

function! BeautifyXml()
   if executable('xmllint')
      normal msHmt
      undojoin | %!xmllint --xmlout --format - 2>/dev/null
      normal 'tzt`sa
   else
      call StubBeautify()
   endif
endfunction

function! BeautifyPerl()
   if executable('perltidy')
      normal msHmt
      undojoin | %!perltidy -i=3 -nt -fnl -anl -bl -l=250 -bbs -bbc -bbb -mbl=2
      normal 'tzt`sa
   else
      call StubBeautify()
   endif
endfunction

function! ToggleSwitchBuffer()
   if index(split(&switchbuf, ','), "split") == -1
      set switchbuf+=split
   else
      set switchbuf-=split
   endif
   echo 'switchbuf ='&switchbuf
endfunction

"diffopt iwhite handling
if has('mac') && $VIM == '/usr/share/vim' | set diffopt-=internal | endif | set diffopt-=iwhite

function! ToggleSwitchDiffIWhite()
   if index(split(&diffopt, ','), "iwhite") == -1
      set diffopt+=iwhite
   else
      set diffopt-=iwhite
   endif
   echo 'diffopt ='&diffopt
endfunction

" git conflicts inspector
source $HOME/.vim/git-conflicts-inspector.vim

map ?? :call ConflictsInspect()<CR>
map ?< :call ConflictsPickLeft()<CR>
map ?> :call ConflictsPickRight()<CR>
"map ?x :call ConflictsNavigate(v:false, v:false, v:false)<CR>
"map ?X :call ConflictsNavigate(v:true , v:false, v:false)<CR>

" Display git-show for hash under cursor in a new window
function! OpenGitShow(What)
   execute "vert new | 0r ! " .. expandcmd("git show '" .. a:What .. "' --")
   setl filetype=git
   setl nolist
   setl buftype=nofile noswapfile nomodifiable
endfunction

" Quick Display help for F12-<?> key strokes suppored
function! F12Help()
   echo "b   - beautify action\n"
   echo "b1  - beautify action for cpp (using clang)\n"
   echo "b2  - beautify action for cpp (using astyle)\n"
   echo "b3  - beautify action for cpp (using bcpp)\n"
   echo "F12 - show F12 help\n"
   echo "h   - toggle wordhighlight\n"
   echo "i   - toggle paste\n"
   echo "l   - toggle list\n"
   echo "n   - toggle number\n"
   echo "q   - toggle quickfix\n"
   echo "g   - toggle gutter\n"
   echo "s   - toggle switchbuf\n"
   echo "/   - toggle autohighlight\n"
   echo "c   - toggle diff iwhite\n"
   echo "t   - toggle show code listing\n"
   echo "d   - display git-show for hash under cursor\n"
endfunction

" Interesting customizations
" use qa to close all windows individually with q
"cnoremap qa windo q
cnoreabbrev <expr> qa getcmdtype() == ":" && getcmdline() == 'qa' ? 'windo q' : 'qa'

" use xa to save and close all windows individually with x
cnoreabbrev <expr> xa getcmdtype() == ":" && getcmdline() == 'xa' ? 'windo x' : 'xa'

" always keep the next word to be found at the center of the screen
"set scrolloff=5
nmap n nzz
nmap N Nzz

function! EnhanceMapping(mode_cmd, mapping, enhancement)
    let current = maparg(a:mapping, 'n', 0, 1)
    if !empty(current)
        execute a:mode_cmd . ' <buffer> ' . a:mapping . ' ' . current.rhs . a:enhancement
    endif
endfunction

augroup EnhanceMappings
    autocmd!
    autocmd VimEnter * call EnhanceMapping('nmap', ']c', 'zz')
    autocmd VimEnter * call EnhanceMapping('nmap', '[c', 'zz')
augroup END

"https://stackoverflow.com/questions/23695727/vim-highlight-a-word-with-without-moving-cursor
nnoremap * *``
nnoremap # #``

"augroup CursorPosition
"   autocmd!
"   autocmd BufLeave * let b:winview = winsaveview()
"   autocmd BufEnter * if(exists('b:winview')) | call winrestview(b:winview) | endif
"augroup END


"F12<key> to apply special properties
map <F12><F12> :call F12Help()<CR>
map <F12>n :setl number!<CR>:echo 'number ='&number<CR>
map <F12>i :setl paste!<CR>:echo 'paste ='&paste<CR>
map <F12>l :setl list!<CR>:echo 'list ='&list<CR>
map <F12>c :call ToggleSwitchDiffIWhite()<CR>
map <F12>s :call ToggleSwitchBuffer()<CR>
map <F12>q :call ToggleQfix()<CR>:<BS><C-L>
map <F12>g :call ToggleGutter()<CR>
map <F12>t :TlistToggle<CR>
map <F12>h :call HLWord()<CR>
map <F12>/ :if AutoHighlightToggle()<Bar>set hls<Bar>endif<CR>
map <F12>b :call StubBeautify()<CR>
map <F12>d :call OpenGitShow("<cword>")<CR>
map <F12>D :call OpenGitShow("origin/main:<cfile>")
autocmd FileType cpp      map <buffer> <F12>b  :call BeautifyUsingClangFormat()<CR>
autocmd FileType cpp      map <buffer> <F12>b1 :call BeautifyUsingClangFormat()<CR>
autocmd FileType cpp      map <buffer> <F12>b2 :call BeautifyUsingAstyle()<CR>
autocmd FileType cpp      map <buffer> <F12>b3 :call BeautifyUsingBcpp()<CR>
autocmd FileType java     map <buffer> <F12>b  :call BeautifyUsingAstyle()<CR>
autocmd FileType perl     map <buffer> <F12>b  :call BeautifyPerl()<CR>
autocmd FileType xml,ant  map <buffer> <F12>b  :call BeautifyXml()<CR>

"imap <TAB> <C-P>
"autocmd FileType make unmap <TAB>

let Tlist_Process_File_Always = 1
set statusline=%<%f\ %h%m%r%([%{Tlist_Get_Tagname_By_Line()}]%)%=%-14.(%l,%c%V%)\ %P

" Always show status line
set laststatus=2

autocmd BufReadPost * if line("'\"") > 0 && line("'\"") <= line("$") | execute "normal g'\"" | endif

" Enable virtualedit for visualblock
set virtualedit=block
vmap k  <Plug>SchleppUp
vmap j  <Plug>SchleppDown
vmap h  <Plug>SchleppLeft
vmap l  <Plug>SchleppRight
vmap Dk <Plug>SchleppDupLeft
vmap Dj <Plug>SchleppDupDown
vmap Dh <Plug>SchleppDupLeft
vmap Dl <Plug>SchleppDupRight

" Ignore some paths
set wildignore+=**/Debug/**
set wildignore+=**/Build/**
set wildignore+=**/build/**
set wildignore+=**/temp/**
set wildignore+=**/libs/**

if filereadable(expand('~/.vimrc.custom'))
   source ~/.vimrc.custom
endif

function! DeleteEmptyBuffers()
   let [l:i, l:n; l:empty] = [1, bufnr('$')]
   while l:i <= l:n
      if bufexists(l:i) && bufname(l:i) == ''
         call add(l:empty, l:i)
      endif
      let l:i += 1
   endwhile

   if len(l:empty) > 0
      silent! execute 'bdelete' join(l:empty)
   endif
endfunction

function! DiffInNewTab(file1, ...)
   let l:cmd = 'tabnew ' .. a:file1
   let l:sep = '|vert botright diffsp '
   for l:file in a:000
      let l:cmd ..= l:sep .. l:file
   endfor
   execute l:cmd
   wincmd =
   tabdo call DeleteEmptyBuffers()
endfunction

command! -nargs=* DiffInNewTab call DiffInNewTab(<f-args>)

function! TmuxSwitchPane(direction)
   if a:direction == "h"
      let l:tmux_cmd = 'if-shell "test #{pane_at_left}   -eq 0" "select-pane -L"'
   elseif a:direction == "j"
      let l:tmux_cmd = 'if-shell "test #{pane_at_bottom} -eq 0" "select-pane -D"'
   elseif a:direction == "k"
      let l:tmux_cmd = 'if-shell "test #{pane_at_top}    -eq 0" "select-pane -U"'
   elseif a:direction == "l"
      let l:tmux_cmd = 'if-shell "test #{pane_at_right}  -eq 0" "select-pane -R"'
   else
      return
   endif

   if winnr("1" .. a:direction) == winnr()
      if $TMUX != "" && !has("gui_running")
         if trim(system("tmux display-message -p '#{window_zoomed_flag}'")) == "0"
            silent call system("tmux " .. l:tmux_cmd)
         endif
      endif
   else
      call win_gotoid(win_getid(winnr("1" .. a:direction)))
   endif
endfunction

"TMUX-VIM Integration:
"Make default vim window navigation keys work seemlessly across tmux
nmap <silent> <C-w><Left>  :call TmuxSwitchPane("h")<CR>
nmap <silent> <C-w><Down>  :call TmuxSwitchPane("j")<CR>
nmap <silent> <C-w><Up>    :call TmuxSwitchPane("k")<CR>
nmap <silent> <C-w><Right> :call TmuxSwitchPane("l")<CR>
nmap <silent> <C-w>h       :call TmuxSwitchPane("h")<CR>
nmap <silent> <C-w>j       :call TmuxSwitchPane("j")<CR>
nmap <silent> <C-w>k       :call TmuxSwitchPane("k")<CR>
nmap <silent> <C-w>l       :call TmuxSwitchPane("l")<CR>

function! Both()
"      let l:left_name = bufname(winbufnr(winnr("1h")))
"      let l:right_name = bufname(winbufnr(winnr("1l")))

   if expand('%:e') == 'hpp'
      let l:cur_winid = win_getid(winnr())
      let l:old_splitright = &splitright
      try
         let &splitright = 1
         vsp %:r.cpp
      finally
         let &splitright = l:old_splitright
         call win_gotoid(l:cur_winid)
      endtry
   elseif expand('%:e') == 'cpp'
      let l:cur_winid = win_getid(winnr())
      let l:old_splitright = &splitright
      try
         let &splitright = 0
         vsp %:r.hpp
      finally
         let &splitright = l:old_splitright
         call win_gotoid(l:cur_winid)
      endtry
   endif
endfunction

command! -nargs=0 Both call Both(<f-args>)

" Weird gvim workaround to restore background to background
execute 'set background=' .. &background
