# vi: filetype=gitconfig

[init]
        defaultBranch = main

[core]
        autocrlf = false
        excludesFile = ~/.gitignore
        #editor = gvim --not-a-term -c 'silent! %sm/\\e.\\{-}m//g' -f +1

[alias]
        st = status
        br = branch -vv
        gr = grep --untracked -In
        lg = log --graph --oneline
        mt = mergetool --tool=vimdiff
        mtg = mergetool --tool=gvimdiff

        #https://stackoverflow.com/questions/8475448/find-merge-commit-which-includes-a-specific-commit
        find-merge = "!sh -c 'commit=$0 && branch=${1:-HEAD} && (git rev-list $commit..$branch --ancestry-path | cat -n; git rev-list $commit..$branch --first-parent | cat -n) | sort -k2 -s | uniq -f1 -d | sort -n | tail -1 | cut -f2'"
        show-merge = "!sh -c 'merge=$(git find-merge $0 $1) && [ -n \"$merge\" ] && git show $merge'"

[commit]
        verbose = true

[status]
        relativePaths = true

#[pager]
#        show     = gvim --not-a-term -c 'silent! %sm/\\e.\\{-}m//g' +'set filetype=git' +1 -
#        diff     = gvim --not-a-term -c 'silent! %sm/\\e.\\{-}m//g' +'set filetype=git' +1 -
#        annotate = gvim --not-a-term -c 'silent! %sm/\\e.\\{-}m//g' +'set filetype=git' +1 -
#        log      = gvim --not-a-term -c 'silent! %sm/\\e.\\{-}m//g' +'set filetype=git' +1 -

[merge]
        conflictstyle = diff3
        tool = gvimdiff

[diff]
        context = 10
        noprefix = true
        algorithm = histogram
        tool = gvimdiff
        renameLimit = 4096

[difftool]
        prompt = false

[mergetool]
        prompt = true
        keepbackup = true

[mergetool "vimdiff"]
        trustExitCode = false

[mergetool "gvimdiff"]
        trustExitCode = false

[grep]
        lineNumber = true

[log]
        decorate = short

[fetch]
        prune = true

[help]
        autocorrect = 0

[color]
        ui = auto
