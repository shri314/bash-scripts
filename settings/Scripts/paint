#!/bin/bash
exec -a "$0" gawk -f <(sed -n '/^\#gawk/,$p' "$0")
exit $?

#gawk -f

#
#Author   : Shriram V
#Email    : shri314@yahoo.com
#Comments : Colors the output of make!!
#

BEGIN {
   RES=system("isatty output");
   CVSCMD=0;
}

{
   if(ENVIRON["FORCE_COLOR"] == "1")
   {
   }
   else
   {
      if(RES == 0)
      {
         print;
         fflush("");
         next;
      }
   }
}

/^[UPTD?] / {
   $0 = gensub(/^(.)/,   "[01;32m\\1[00m", 1);
   CVSCMD=1;
}

/^[AR] / {
   $0 = gensub(/^(.)/,   "[33;44m\\1[00m", 1);
   CVSCMD=1;
}

/^M / {
   $0 = gensub(/^(.)/,   "[01;35m\\1[00m", 1);
   CVSCMD=1;
}

/^C / {
   $0 = gensub(/^(.)/,   "[01;41m\\1[00m", 1);
   CVSCMD=1;
}

/^G / {
   $0 = gensub(/^(.)/,   "[30;43m\\1[00m", 1);
   CVSCMD=1;
}

/^Index: / {
   $0 = gensub(/^.*$/,   "[01;32m\\0[00m", 1); 
   CVSCMD=1;
}

/^[-][-][-] / {
   $0 = gensub(/^.*$/,   "[01;32m\\0[00m", 1); 
   CVSCMD=1;
}

/^[+][+][+] / {
   $0 = gensub(/^.*$/,   "[01;32m\\0[00m", 1); 
   CVSCMD=1;
}

/^@@ .* @@$/ {
   $0 = gensub(/^.*$/,   "[01;33m\\0[00m", 1); 
   CVSCMD=1;
}

/^[-][^-]?/ {
   $0 = gensub(/^.*$/,   "[01;31m\\0[00m", 1);
   CVSCMD=1;
}

/^[+][^+]?/ {
   $0 = gensub(/^.*$/,   "[01;36m\\0[00m", 1); 
   CVSCMD=1;
}

{
   if(CVSCMD == 1)
   {
      CVSCMD = 0;
      print;
      fflush("");
      next;
   }
}

/[^:]*:[0-9]+/ {
   $0 = gensub(/:([0-9]+)/,               ":[01;31m\\1[00m",     "g");
}

/^make/ {
   $0 = gensub(/([[][^ ]*)[]]/,             "[01;33m\\1[00m[01;33m][00m",     "g");
   $0 = gensub(/(make)/,                    "[01;32m\\1[00m",                     "g");
   $0 = gensub(/(directory `)(\/[^']*)'/,   "\\1[01;34m\\2[00m'",                 "g");
}

{
   $0 = gensub(/ (-[a-zA-Z-][^ ]*)/,            " [01;35m\\1[00m", "g");
   $0 = gensub(/([\/.a-zA-Z_-]*g[+c][+cj]) / ,  "[01;32m\\1[00m ", "g");
   $0 = gensub(/([\/.a-zA-Z_-]*distcc) / ,      "[01;32m\\1[00m ", "g");
   $0 = gensub(/([\/.a-zA-Z_-]*ccache) / ,      "[01;32m\\1[00m ", "g");
   $0 = gensub(/([\/.a-zA-Z_-]*java) / ,        "[01;32m\\1[00m ", "g");
   $0 = gensub(/([\/.a-zA-Z_-]*javac) / ,       "[01;32m\\1[00m ", "g");
   $0 = gensub(/([\/.a-zA-Z_-]*cp) / ,          "[01;32m\\1[00m ", "g");
   $0 = gensub(/([\/.a-zA-Z_-]*install) / ,     "[01;32m\\1[00m ", "g");
   $0 = gensub(/([\/.a-zA-Z_-]*libtool) / ,     "[01;32m\\1[00m ", "g");
   $0 = gensub(/([\/.a-zA-Z_-]*ranlib) / ,      "[01;32m\\1[00m ", "g");
   $0 = gensub(/([\/.a-zA-Z_-]*ar) / ,          "[01;32m\\1[00m ", "g");
   $0 = gensub(/([\/.a-zA-Z_-]*sh) / ,          "[01;32m\\1[00m ", "g");
   $0 = gensub(/([\/.a-zA-Z_-]*mkdir) / ,       "[01;32m\\1[00m ", "g");
   $0 = gensub(/([\/.a-zA-Z_-]*rm) / ,          "[01;32m\\1[00m ", "g");
   $0 = gensub(/([\/.a-zA-Z_-]*mv) / ,          "[01;32m\\1[00m ", "g");
   $0 = gensub(/([\/.a-zA-Z_-]*test) / ,        "[01;32m\\1[00m ", "g");
   $0 = gensub(/([\/.a-zA-Z_-]*echo) / ,        "[01;32m\\1[00m ", "g");

   $0 = gensub(/Can.t locate/,                  "[01;33m\\0[00m", "g");
   $0 = gensub(/cannot find/,                   "[01;33m\\0[00m", "g");

   $0 = gensub(/^([[:alnum:]/._+-]+[.][Cc])\>/,               "[00;31m\\0[00m", "g");
   $0 = gensub(/^([[:alnum:]/._+-]+[.][Hh])\>/,               "[00;31m\\0[00m", "g");
   $0 = gensub(/^([[:alnum:]/._+-]+[.][Cc][Cc])\>/,           "[00;31m\\0[00m", "g");
   $0 = gensub(/^([[:alnum:]/._+-]+[.][Hh][Hh])\>/,           "[00;31m\\0[00m", "g");
   $0 = gensub(/^([[:alnum:]/._+-]+[.][Cc][Pp][Pp])\>/,       "[00;31m\\0[00m", "g");
   $0 = gensub(/^([[:alnum:]/._+-]+[.][Hh][Pp][Pp])\>/,       "[00;31m\\0[00m", "g");
   $0 = gensub(/^([[:alnum:]/._+-]+[.][Ii][Nn][Ll])\>/,       "[00;31m\\0[00m", "g");
   $0 = gensub(/^([[:alnum:]/._+-]+[.][Jj][Aa][Vv][Aa])\>/,   "[00;31m\\0[00m", "g");

   $0 = gensub(/([[:alnum:]/._+-]+[.][Tt][Cc][Cc])\>[:]/,     "[00;31m\\0[00m:", 1);
   $0 = gensub(/(\/usr\/[[:alnum:]/._+-]+)\>[:]/,             "[00;31m\\1[00m:", 1);

   $0 = gensub(/(\<CC\>)/ ,                                   "[01;32m\\1[00m", "g");
   $0 = gensub(/(\<LD\>)/ ,                                   "[01;32m\\1[00m", "g");
   $0 = gensub(/(\<CCLD\>)/ ,                                 "[01;32m\\1[00m", "g");
   $0 = gensub(/(\<CXX\>)/ ,                                  "[01;32m\\1[00m", "g");
   $0 = gensub(/(\<CXXLD\>)/ ,                                "[01;32m\\1[00m", "g");

   $0 = gensub(/(\<[pP][aA][sS][sS]\>)/ ,                     "[01;32m\\1[00m", "g");
   $0 = gensub(/(\<[pP][aA][sS][sS][eE][dD]\>)/ ,             "[01;32m\\1[00m", "g");
   $0 = gensub(/(\<[fF][aA][iI][lL]\>)/,                      "[01;33m[41m\\1[00m", "g");
   $0 = gensub(/(\<[eE][rR][rR][oO][rR]\>)/,                  "[01;33m[41m\\1[00m", "g");
   $0 = gensub(/(\<[eE][rR][rR][oO][rR][sS]\>)/,              "[01;33m[41m\\1[00m", "g");
   $0 = gensub(/(\<[fF][aA][tT][aA][lL]\>)/,                  "[01;33m[41m\\1[00m", "g");
   $0 = gensub(/(\<[fF][aA][iI][lL][eE][dD]\>)/,              "[01;33m[41m\\1[00m", "g");
   $0 = gensub(/(\<[fF][aA][iI][lL][uU][rR][eE]\>)/,          "[01;33m[41m\\1[00m", "g");
   $0 = gensub(/([!][!][!][fF][aA][^!]*[!][!][!])/,           "[01;33m[44m\\1[00m", "g");
   $0 = gensub(/(^[0-9][0-9]*[)][ ].*)/,                      "[01;33m[44m\\1[00m", "g");
   $0 = gensub(/(\<[fF][aA][tT][aA][lL]\>)/,                  "[01;33m[41m\\1[00m", "g");
   $0 = gensub(/(\<[nN][oO][tT][iI][cC][eE]\>)/,              "[01;33m\\0[00m", "g");
   $0 = gensub(/(\<[aA][sS][sS][eE][rR][tT][^[:space:]]*\>)/, "[01;33m\\1[00m", "g");

   $0 = gensub(/\<void\>/,      "[01;32m\\0[00m", "g");
   $0 = gensub(/\<bool\>/,      "[01;32m\\0[00m", "g");
   $0 = gensub(/\<char\>/,      "[01;32m\\0[00m", "g");
   $0 = gensub(/\<int\>/,       "[01;32m\\0[00m", "g");
   $0 = gensub(/\<short\>/,     "[01;32m\\0[00m", "g");
   $0 = gensub(/\<long\>/,      "[01;32m\\0[00m", "g");
   $0 = gensub(/\<float\>/,     "[01;32m\\0[00m", "g");
   $0 = gensub(/\<double\>/,    "[01;32m\\0[00m", "g");
   $0 = gensub(/\<auto\>/,      "[01;32m\\0[00m", "g");

   $0 = gensub(/\<constexpr\>/, "[01;32m\\0[00m", "g");
   $0 = gensub(/\<const\>/,     "[01;32m\\0[00m", "g");
   $0 = gensub(/\<concept\>/,   "[01;32m\\0[00m", "g");
   $0 = gensub(/\<unsigned\>/,  "[01;32m\\0[00m", "g");
   $0 = gensub(/\<signed\>/,    "[01;32m\\0[00m", "g");
   $0 = gensub(/\<typedef\>/,   "[01;32m\\0[00m", "g");
   $0 = gensub(/\<typename\>/,  "[01;32m\\0[00m", "g");
   $0 = gensub(/\<template\>/,  "[01;32m\\0[00m", "g");
   $0 = gensub(/\<class\>/,     "[01;32m\\0[00m", "g");
   $0 = gensub(/\<struct\>/,    "[01;32m\\0[00m", "g");
   $0 = gensub(/\<namespace\>/, "[01;32m\\0[00m", "g");
   $0 = gensub(/\<static\>/,    "[01;32m\\0[00m", "g");
   $0 = gensub(/\<virtual\>/,   "[01;32m\\0[00m", "g");

   $0 = gensub(/\<this\>/,      "[01;33m\\0[00m", "g");
   $0 = gensub(/\<typeid\>/,    "[01;33m\\0[00m", "g");
   $0 = gensub(/\<sizeof\>/,    "[01;33m\\0[00m", "g");
   $0 = gensub(/\<try\>/,       "[01;33m\\0[00m", "g");
   $0 = gensub(/\<throw\>/,     "[01;33m\\0[00m", "g");
   $0 = gensub(/\<catch\>/,     "[01;33m\\0[00m", "g");
   $0 = gensub(/\<if\>/,        "[01;33m\\0[00m", "g");
   $0 = gensub(/\<then\>/,      "[01;33m\\0[00m", "g");
   $0 = gensub(/\<else\>/,      "[01;33m\\0[00m", "g");
   $0 = gensub(/\<fi\>/,        "[01;33m\\0[00m", "g");
   $0 = gensub(/\<for\>/,       "[01;33m\\0[00m", "g");
   $0 = gensub(/\<static_assert\>/,  "[01;33m\\0[00m", "g");
   $0 = gensub(/\<operator\>/,  "[01;33m\\0[00m", "g");
   $0 = gensub(/\<new\>/,       "[01;33m\\0[00m", "g");
   $0 = gensub(/\<delete\>/,    "[01;33m\\0[00m", "g");
   $0 = gensub(/\<return\>/,    "[01;33m\\0[00m", "g");
   $0 = gensub(/\<decltype\>/,  "[01;33m\\0[00m", "g");
   $0 = gensub(/\<using\>/,     "[01;33m\\0[00m", "g");
   $0 = gensub(/\<public\>/,    "[01;33m\\0[00m", "g");
   $0 = gensub(/\<private\>/,   "[01;33m\\0[00m", "g");
   $0 = gensub(/\<protected\>/, "[01;33m\\0[00m", "g");
   $0 = gensub(/\<requires\>/,  "[01;33m\\0[00m", "g");

   $0 = gensub(/\<true\>/,      "[00;35m\\0[00m", "g");
   $0 = gensub(/\<false\>/,     "[00;35m\\0[00m", "g");

   $0 = gensub(/\<or\>/,        "[01;33m\\0[00m", "g");
   $0 = gensub(/\<and\>/,       "[01;33m\\0[00m", "g");
   $0 = gensub(/\<not\>/,       "[01;33m\\0[00m", "g");

   $0 = gensub(/\/\/.*/,        "[00;36m\\0[00m", "g");
   print;
   fflush("");
}

